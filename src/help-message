#!/usr/bin/env bash
set -euo pipefail

_fzf_help_directory=$(dirname $(realpath "${BASH_SOURCE:-$0}"))
source "$_fzf_help_directory"/fzf-help-log

usage="Usage: $(basename "$0") [-h | --help] <cmd>

Evaluates the HELP_MESSAGE_CMD environment variable and writes the result to
stdout and a temp file. If no <cmd> argument is given, then the content of
the temp file is written to stdout, i.e, the help message of the command that
was last evaluated.

The default values of HELP_MESSAGE_CMD is:

    export HELP_MESSAGE_CMD='\$cmd --help'

here, you can \$cmd as a placeholder for the <cmd> argument.

where:
    options:
    -h --help   shows this help messages

    positional:
    <cmd>   an existing command"

parse_args() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h | --help)
                echo "$usage"
                exit 0
                ;;
            *)
                if [[ -z $cmd ]]; then
                    cmd="$1"
                else
                    echo "Unknown argument: $1"
                    echo "$usage"
                    exit 1
                fi
                ;;
        esac
        shift
    done
}

cmd=""
parse_args "$@"

help_message=$("$_fzf_help_directory"/make-temp "fzf-help-message")
help_message_cmd="${HELP_MESSAGE_CMD:-$cmd --help}"
help_message_rc="${HELP_MESSAGE_RC:-""}"
fzf_help_log "Help command is: $help_message_cmd"
fzf_help_log "Help message file is: $help_message"
fzf_help_log "Aliases: $help_message_rc"

if [ -f "$help_message_rc" ]; then
    shopt -s expand_aliases
    . "$help_message_rc"
fi
    

[[ $cmd ]] && { eval "$help_message_cmd" >"$help_message" || true; }

cat "$help_message" > /dev/stdout
