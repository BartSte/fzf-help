#!/usr/bin/env bash

usage="Usage: $(basename "$0") [-h | --help] <opts> <index>

Uses bat to display the help message from stdin. The command line options are
provided as argument <opts>, where the nth value (<index>) of these options is
highlighted in the help message. 

stdin can, for example, be the output of the \`--help\` command of a program.

The options <opts> must be provided in the following format:

    line_number:option1
    line_number:option2
    line_number:option3

Where <index> is used to get the line-option pair. This format corresponds to
the output of the 'ag --only-matching --numbers' command.

stdin:
    The help message to display

options:
    -h --help   shows this help messages

positional:
    <opts>  the command line options
    <index> the index of the option to highlight"

parse_args() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h | --help)
                echo "$usage"
                exit 0
                ;;
            *)
                if [[ -z $opts ]]; then
                    opts="$1"
                elif [[ -z $index ]]; then
                    index="$1"
                else
                    echo "Unknown argument: $1"
                    echo "$usage"
                    exit 1
                fi
                ;;
        esac
        shift
    done
}

#######################################
# `opts` is a list of line_number:option pairs, separated by a new line. For
# example:
#   1:--some-option
#   2:--some-other-option
#  10:--another-option
# This function returns the line number of the option at the given index. In
# the example above, for index 0, the line number 1 is returned.
#######################################
get_line_number() {
    local opts index line_number
    opts=$1
    index=$2
    line_number=$(head -n $(($index + 1)) <<<"$opts" | tail -1 | sed "s/:.*$//g")
    [ -z $line_number ] && line_number=0
    echo "$line_number"
}

#######################################
# Returns the number of lines to scroll up such that the line containing the
# option at the given index is in the middle of the screen.
#######################################
get_scroll_lines() {
    local half_page line_number scroll

    line_number=$1
    half_page=$(get_half_page)

    scroll=$(($line_number - $half_page))
    scroll=$(($scroll > 0 ? $scroll : 0))
    echo $scroll
}

#######################################
# Returns half the number of lines of the terminal. If the environment variable
# FZF_PREVIEW_LINES is set, its value is returned instead.
#######################################
get_half_page() {
    local number_of_lines

    number_of_lines=$FZF_PREVIEW_LINES
    [ -z $number_of_lines ] && number_of_lines=$(tput lines)

    echo $(($number_of_lines / 2))
}

parse_args "$@"

[[ -z $opts ]] && echo "Missing <opts>" && echo "$usage" && exit 1
[[ -z $index ]] && echo "Missing <index>" && echo "$usage" && exit 1

[[ -z $FZF_HELP_SYNTAX ]] && FZF_HELP_SYNTAX="txt"
line_number=$(get_line_number "$opts" $index)
scroll=$(get_scroll_lines $line_number)
printf '\033[2J'
bat -f -pp -H $line_number -r $scroll: --language=$FZF_HELP_SYNTAX
